git bash

git init # create a new project in the current folder

git init folder-name # create a new project in the specified folder

Git status # current state of the repository

Git add "filename" # add the change to the repository

Git checkout 'branchname' # branch navigation

Git checkout -b 'branchname' # create a branch and checkout

git branch --merged # show branches already merged into active

git branch --no-merged # show branches not merged into active

Git commit -a -m "text message" # commit the change and index

Git add . # make a change by adding all files

Moving commits

Git merge # merge changes from two branches into one, create a new commit with hash (all changes in one commit)

Git rebase feature master # all commits in the feature branch will be after the commits that were added from master, commit history in one line

Push to remote repository:

git push origin feature --force

or git push origin +feature

Git cherry-pick 'hash' -edit # allows you to copy one or more commits from one branch to another, creating a new commit on the other branch,

-edit # when executing a command, git will request a new message for the commit that is pushed to the branch

Git cherry-pick hash --no-commit # commit changes are pushed to the working directory, no new commit is created

Logs

Git log # will list the changes made

git log --pretty=oneline # one line history

git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short

--pretty="..." # defines the output format; %h # shortened commit hash; %d # commit additions ("heads" of branches or tags);

%ad # commit date; %s # comment; %an # author's name; --graph # displays the commit tree as an ASCII graph;

--date=short # keeps the date format short and pretty

Alias:

Registered in git bash:

git config --global alias.co checkout

git config --global alias.ci commit

git config --global alias.st status

git config --global alias.br branch

git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"

git config --global alias.type 'cat-file -t'

git config --global alias.dump 'cat-file -p'

Added to .gitconfig file:

[alias]

co = checkout

ci = commit

st = status

br = branch

hist = log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short

type=cat-file -t

dump=cat-file -p

Switching between commits, tags:

Git hist (git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short)

Git hist main â€“all # will show all logs from the main branch

git co # switch to an older commit

git co main # revert to the latest version of the branch

git co ^ # will switch to an older version

git tag # will show all available tags


Repositories:

git remote -v # list remote repositories associated with this

git remote add origin git@github.com:nicothin/test.git # add a remote repository (abbreviated as origin) with the specified URL

git fetch origin # fetch all branches from the remote repository (abbreviated as origin), but don't merge with your own branches

git checkout origin/github_branch # check out the branch downloaded from the remote repository

(no local editable copy is created! if you need to edit, you will have to merge)

git push origin master # push to the remote repository (abbreviated as origin) the data of your master branch

git pull origin # pull changes from remote repository (all branches)

git pull origin master # pull changes from the remote repository (only the specified branch)

The file was stored in the repository, changed, did NOT use git add, you need to return the old version:

Git checkout 'filename'

The repository had a file, modified, used git add but didn't use commit, need to undo:

git reset HEAD - Reset the change index and git checkout "filename"

The file was stored in the repository, used git add, used commit, must be canceled:

git revert HEAD - allows you to undo any commits to the repository (goes to the editor, where you can edit the default commit message or leave it as it is, you need to save and close the file)
